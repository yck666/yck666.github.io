<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yckkk!!</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yck666.github.io/"/>
  <updated>2017-07-20T13:50:10.543Z</updated>
  <id>https://yck666.github.io/</id>
  
  <author>
    <name>杨长</name>
    <email>925713671@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017-7-20-最小生成树（普里姆算法和克鲁斯卡尔算法）</title>
    <link href="https://yck666.github.io/2017/07/20/2017-7-20-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>https://yck666.github.io/2017/07/20/2017-7-20-最小生成树/</id>
    <published>2017-07-20T13:42:59.000Z</published>
    <updated>2017-07-20T13:50:10.543Z</updated>
    
    <content type="html"><![CDATA[<p>所谓的最小生成树是：在给定的一个带权的无向连通图，如何选取一棵生成树，<br>使树上所有边上权的总和最小。</p>
<p>求最小生成树的算法一般有普里姆算法和克鲁斯卡尔算法。</p>
<p>普里姆算法：<br>    图的存贮结构采用邻接矩阵.此方法是按各个顶点连通的步骤进行,需要用一个顶点集合,开始为空集,以后将以连通的顶点陆续加入到集合中,全部顶点加入集合后就得到所需的最小生成树 .<br>    方法:从指定顶点开始将它加入集合中,然后将集合内的顶点与集合外的顶点所构成的所有边中选取权值最小的一条边作为生成树的边,并将集合外的那个顶点加入到集合中,表示该顶点已连通.再用集合内的顶点与集合外的顶点构成的边中找最小的边,并将相应的顶点加入集合中,如此下去直到全部顶点都加入到集合中,即得最小生成树.</p>
<p>克鲁斯卡尔算法：<br>    图的存贮结构采用边集数组,且权值相等的边在数组中排列次序可以是任意的.该方法对于边相对比较多的不是很实用,浪费时间.<br>    方法:将图中边按其权值由小到大的次序顺序选取,若选边后不形成回路,则保留作为一条边,若形成回路则除去.依次选够(n-1)条边,即得最小生成树.(n为顶点数)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;所谓的最小生成树是：在给定的一个带权的无向连通图，如何选取一棵生成树，&lt;br&gt;使树上所有边上权的总和最小。&lt;/p&gt;
&lt;p&gt;求最小生成树的算法一般有普里姆算法和克鲁斯卡尔算法。&lt;/p&gt;
&lt;p&gt;普里姆算法：&lt;br&gt;    图的存贮结构采用邻接矩阵.此方法是按各个顶点连通的步骤进
    
    </summary>
    
    
      <category term="普里姆算法和克鲁斯卡尔算法" scheme="https://yck666.github.io/tags/%E6%99%AE%E9%87%8C%E5%A7%86%E7%AE%97%E6%B3%95%E5%92%8C%E5%85%8B%E9%B2%81%E6%96%AF%E5%8D%A1%E5%B0%94%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2017-7-17-将进酒</title>
    <link href="https://yck666.github.io/2017/07/17/2017-7-17-%E5%B0%86%E8%BF%9B%E9%85%92/"/>
    <id>https://yck666.github.io/2017/07/17/2017-7-17-将进酒/</id>
    <published>2017-07-16T17:52:44.000Z</published>
    <updated>2017-07-16T17:57:02.426Z</updated>
    
    <content type="html"><![CDATA[<pre><code>                将进酒
                          李白
君不见，黄河之水天上来，奔流到海不复回。
君不见，高堂明镜悲白发，朝如青丝暮成雪。
人生得意须尽欢，莫使金樽空对月。
天生我材必有用，千金散尽还复来。
烹羊宰牛且为乐，会须一饮三百杯。
岑夫子，丹丘生，将进酒，杯莫停。
与君歌一曲，请君为我倾耳听。
钟鼓馔玉不足贵，但愿长醉不复醒。
古来圣贤皆寂寞，惟有饮者留其名。
陈王昔时宴平乐，斗酒十千恣欢谑。
主人何为言少钱，径须沽取对君酌。
五花马，千金裘，呼儿将出换美酒，与尔同销万古愁。
</code></pre><p><img src="http://pic24.nipic.com/20121017/9501064_092256484118_2.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;                将进酒
                          李白
君不见，黄河之水天上来，奔流到海不复回。
君不见，高堂明镜悲白发，朝如青丝暮成雪。
人生得意须尽欢，莫使金樽空对月。
天生我材必有用，千金散尽还复来。
烹羊宰牛
    
    </summary>
    
    
      <category term="李白" scheme="https://yck666.github.io/tags/%E6%9D%8E%E7%99%BD/"/>
    
  </entry>
  
  <entry>
    <title>字符串匹配的KMP算法</title>
    <link href="https://yck666.github.io/2017/07/17/2017-7-17-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%9A%84KMP%E7%AE%97%E6%B3%95/"/>
    <id>https://yck666.github.io/2017/07/17/2017-7-17-字符串匹配的KMP算法/</id>
    <published>2017-07-16T17:35:14.000Z</published>
    <updated>2017-07-16T17:47:01.672Z</updated>
    
    <content type="html"><![CDATA[<pre><code>刚看完数据结构与算法，看到里面的字符串匹配的KMP算法，在参考里阮一峰老师的blog后，
</code></pre><p>发现还是很好理解，<br>大家对KMP感兴趣的可以看看原文<br><a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html</a><br>    其中最主要的就是对于部分匹配值额理解，其实也很简单，只要你理解了他定义的前缀和后缀的概念，<br>然后对应找到匹配值个数多少就好了。<br>    我觉得关于学习，最主要的还是要学会在网上自己查找资料，很多过来人整理的资料都能让我们豁然开朗。</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;刚看完数据结构与算法，看到里面的字符串匹配的KMP算法，在参考里阮一峰老师的blog后，
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;发现还是很好理解，&lt;br&gt;大家对KMP感兴趣的可以看看原文&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/
    
    </summary>
    
    
      <category term="数据结构与算法 KMP算法 学习" scheme="https://yck666.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-KMP%E7%AE%97%E6%B3%95-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>重新搭建了我的博客。Staring</title>
    <link href="https://yck666.github.io/2017/07/16/2017-7-16-I&#39;m-Coming/"/>
    <id>https://yck666.github.io/2017/07/16/2017-7-16-I&#39;m-Coming/</id>
    <published>2017-07-16T04:29:54.000Z</published>
    <updated>2017-07-16T17:47:08.416Z</updated>
    
    <content type="html"><![CDATA[<pre><code>###刚刚使用github和jekyll搭建好博客，关于搭建和模板选择上遇到的问题和解决方法

注册并搞好了博客界面，大家有不懂的，可以百度下，很多都有详细的方法。另外可以参考下这篇，
每一步都写的很详细https://www.zhihu.com/question/59088760 。不过他的系统是windows的
所以其实相对还是麻烦一些，如果你和我一样也是linux系统那么更加方便，关于jekyll的安装和git
的安装都是几条命令的事情，百度上一查一大堆这种回答。还有在搭建过程中我意外的看到了一个jekyll
中文的网址，里面关于jekyll的各个文件及文件夹的功能和使用都讲的很详细，大家可以看看，
http://jekyll.com.cn/docs/home/
在看了那么多的模板后，我还是选择了最最最简单直接低调的一种，大家可以参考下，
喜欢的话可以fork  。https://yck666.github.io/ 
最后是希望能一起进步，一起学习。####



上面那些是之前使用github和jekyll搭建github博客写的。第二次搭建blog发现还是很有收获的，为这次
</code></pre><p>   是使用hexo来搭建博客，hexo更加的方便快速，在有了第一次经验后根据百度便能很快的搞定，而且满意程度<br>   比用jekyll搭建的还高，hexo不仅提供了不错的主题，而且在修改布局方面也是非常的方便。另外附上大神的<br>   帖子，不仅让为成功完成，而且很有收获。<br>   <a href="http://blog.csdn.net/tx874828503/article/details/51577815" target="_blank" rel="external">http://blog.csdn.net/tx874828503/article/details/51577815</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;###刚刚使用github和jekyll搭建好博客，关于搭建和模板选择上遇到的问题和解决方法

注册并搞好了博客界面，大家有不懂的，可以百度下，很多都有详细的方法。另外可以参考下这篇，
每一步都写的很详细https://www.zhihu.com/quest
    
    </summary>
    
    
      <category term="开始" scheme="https://yck666.github.io/tags/%E5%BC%80%E5%A7%8B/"/>
    
  </entry>
  
</feed>
